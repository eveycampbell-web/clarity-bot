# -*- coding: utf-8 -*-
"""
Clarity Bot ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–≤–æ–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ —Ñ–∏–∫—Å–∞–º–∏
- aiogram 2.25.1
- Python 3.11

–§—É–Ω–∫—Ü–∏–∏:
  ‚Ä¢ /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —Ñ–æ—Ç–æ + –ö–ù–û–ü–ö–ò (reply): ¬´–ú–æ—è —Ç–µ–º–∞¬ª, ¬´–û –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏¬ª, ¬´–ö–∞–Ω–∞–ª¬ª
  ‚Ä¢ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó (consent_shown)
  ‚Ä¢ /subscribe –∏ /unsubscribe
  ‚Ä¢ ¬´–ú–æ—è —Ç–µ–º–∞¬ª ‚Üí 3 —Ç–µ–º—ã ‚Üí 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: 5 —Ç–≤–æ–∏—Ö + 6-—è ¬´—Å–ª—É—á–∞–π–Ω–∞—è –∏–∑ —ç—Ç–∏—Ö 5¬ª
  ‚Ä¢ ¬´–∑–∞–º–æ–∫¬ª –Ω–∞ 7 –¥–Ω–µ–π –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (usage.json)
  ‚Ä¢ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ SQLite (users/events)
  ‚Ä¢ –∞–≤—Ç–æ-–ø–æ—á–∏–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ (subscribe_flag, consent_shown) –≤ users

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env:
  BOT_TOKEN=...
  TELEGRAM_CHANNEL_LINK=https://t.me/annap_club
  OWNER_USERNAME=@AnnaPClub
"""

import os
import json
import random
import logging
import time
from pathlib import Path
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv
import sqlite3

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s:%(name)s:%(message)s"
)

# ---------- BASE & ENV ----------
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(dotenv_path=BASE_DIR / ".env")

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_LINK = os.getenv("TELEGRAM_CHANNEL_LINK", "https://t.me/your_channel").strip()
OWNER_USERNAME = (os.getenv("OWNER_USERNAME", "@your_username") or "").strip()
USAGE_FILE = BASE_DIR / "usage.json"          # –∑–∞–º–æ–∫ –Ω–∞ 7 –¥–Ω–µ–π
DB_PATH = BASE_DIR / "subscribers.db"         # –±–∞–∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Å–æ–±—ã—Ç–∏–π

if not TOKEN:
    raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞. –û—Ç–∫—Ä–æ–π—Ç–µ .env –∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ BOT_TOKEN=...")

# ---------- –ë–û–¢ ----------
bot = Bot(token=TOKEN, parse_mode="HTML", timeout=120)
dp = Dispatcher(bot)

# ---------- –¢–ï–ö–°–¢–´ ----------
WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ¬´–ö–∞—Ä—Ç–∞ —è—Å–Ω–æ—Å—Ç–∏¬ª üåó\n\n"
    "–ù–∞–∂–º–∏ ¬´–ú–æ—è —Ç–µ–º–∞¬ª ‚Üí –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç—Ä—ë—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—É—á–∏ –º—è–≥–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É.\n"
    "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ <b>—Ä–∞–∑ –≤ 7 –¥–Ω–µ–π</b>, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç—Ä–µ–∑–≤—ã–π –≤–∑–≥–ª—è–¥ –∏ –ø–æ–ª—å–∑—É.\n\n"
    "–í–∞–∂–Ω–æ: –±–æ—Ç –Ω–æ—Å–∏—Ç —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è "
    "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π. <b>18+</b>"
)

CONSENT_TEXT = (
    "–ú–æ–∂–Ω–æ —è –±—É–¥—É –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—ë–ø–ª—ã–µ –ø–∏—Å—å–º–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç, –º–∏–Ω–∏-–ø—Ä–∞–∫—Ç–∏–∫–∏, –∞–∫—Ü–∏–∏?\n"
    "–¢—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /unsubscribe."
)

CTA_TAIL = (
    f"\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_LINK}\n\n"
    f"üéÅ –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ ¬´–Ø–°–ù–û–°–¢–¨¬ª –≤ –ø—Ä–æ—Ñ–∏–ª—å {OWNER_USERNAME} ‚Äî –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É <b>50%</b> –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–±–æ—Ä. "
    "–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. <b>18+</b>"
)

LOCK_TEXT = (
    "¬´–ö–∞—Ä—Ç–∞ —è—Å–Ω–æ—Å—Ç–∏¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ <b>1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é</b> ‚Äî —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞. "
    "–ü–æ–∫–∞ –∏–¥—ë—Ç –æ–∂–∏–¥–∞–Ω–∏–µ, –≤ –∫–∞–Ω–∞–ª–µ —Ç–µ–±—è —É–∂–µ –∂–¥—É—Ç —Ä–∞—Å–∫–ª–∞–¥—ã, –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Ä–∞–∑–±–æ—Ä—ã ‚Äî –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –¥–µ—Ä–∂–∞—Ç—å –∫—É—Ä—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
    f"–ó–∞–≥–ª—è–Ω–∏: {CHANNEL_LINK}\n\n"
    f"üéÅ –ù–µ —Ö–æ—á–µ—à—å –∂–¥–∞—Ç—å –∏ –Ω—É–∂–µ–Ω –ª–∏—á–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å–æ <b>—Å–∫–∏–¥–∫–æ–π 50%</b>? –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ ¬´–Ø–°–ù–û–°–¢–¨¬ª –≤ –ø—Ä–æ—Ñ–∏–ª—å {OWNER_USERNAME}. "
    "–°–∫–∏–¥–∫–∞ 50% –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. <b>18+</b>"
)

ABOUT_TEXT = (
    "–§–æ—Ä–º–∞—Ç—ã: –¢–∞—Ä–æ / –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è / –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è ‚Äî —Ñ–æ–∫—É—Å –Ω–∞ —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.\n"
    "–ß—Ç–æ –ø–æ–ª—É—á–∏—à—å: —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ª–Ω—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã. "
    "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —É—Å–ª—ã—à–∞—Ç—å, –∫–∞–∫ —Ö–æ—á–µ—à—å –∂–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç—ã üíö.\n\n"
    f"üí¨ –ù–∞–ø–∏—à–∏ ¬´–Ø–°–ù–û–°–¢–¨¬ª {OWNER_USERNAME} ‚Äî –ø–æ–¥—Å–∫–∞–∂—É —Ñ–æ—Ä–º–∞—Ç –∏ –≤—Ä–µ–º—è. <b>18+</b>"
)

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------
# –°–æ–≥–ª–∞—Å–∏–µ/–æ—Ç–∫–∞–∑ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –û–î–ò–ù –†–ê–ó)
CONSENT_KB = ReplyKeyboardMarkup(resize_keyboard=True)
CONSENT_KB.add(KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚ù§Ô∏è"), KeyboardButton("üö´ –ù–µ —Å–µ–π—á–∞—Å"))

# –ì–õ–ê–í–ù–ê–Ø reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É)
KB_MAIN = ReplyKeyboardMarkup(resize_keyboard=True)
KB_MAIN.row(KeyboardButton("–ú–æ—è —Ç–µ–º–∞"))
KB_MAIN.row(KeyboardButton("–û –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"), KeyboardButton("–ö–∞–Ω–∞–ª"))

# Inline-–∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–∞–º–∏
TOPICS_KB = InlineKeyboardMarkup(row_width=1)
TOPICS_KB.add(
    InlineKeyboardButton("–ß—Ç–æ –æ–Ω(–∞) –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?", callback_data="t:think"),
    InlineKeyboardButton("–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ?", callback_data="t:money"),
    InlineKeyboardButton("–ú–æ–π —Å–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç", callback_data="t:talent"),
)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã 1‚Äì5 + üé≤ ---
def build_cards_kb(topic: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("1", callback_data=f"c:{topic}:1"),
        InlineKeyboardButton("2", callback_data=f"c:{topic}:2"),
        InlineKeyboardButton("3", callback_data=f"c:{topic}:3"),
        InlineKeyboardButton("4", callback_data=f"c:{topic}:4"),
        InlineKeyboardButton("5", callback_data=f"c:{topic}:5"),
    )
    kb.add(InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è", callback_data=f"c:{topic}:rand"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="t:menu"))
    return kb

BACK_TO_MENU_KB = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="t:menu")
)

# ---------- SQLite: —Å—Ö–µ–º–∞ –∏ –∞–≤—Ç–æ-–ø–æ—á–∏–Ω–∫–∞ ----------
def db_init():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # –ë–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id        INTEGER PRIMARY KEY,
            username       TEXT,
            first_name     TEXT,
            last_name      TEXT,
            first_seen_ts  INTEGER,
            last_seen_ts   INTEGER
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS events (
            id          INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id     INTEGER,
            event_type  TEXT,
            ts          INTEGER,
            meta        TEXT
        )
    """)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –±–∞–∑–∞ —Å—Ç–∞—Ä–∞—è
    cur.execute("PRAGMA table_info(users)")
    cols = {row[1] for row in cur.fetchall()}
    if "subscribe_flag" not in cols:
        cur.execute("ALTER TABLE users ADD COLUMN subscribe_flag INTEGER DEFAULT 0")
    if "consent_shown" not in cols:
        cur.execute("ALTER TABLE users ADD COLUMN consent_shown INTEGER DEFAULT 0")

    conn.commit()
    conn.close()

def log_event(user_id: int, event_type: str, meta: str | None = None):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO events (user_id, event_type, ts, meta) VALUES (?,?,?,?)",
        (user_id, event_type, int(time.time()), meta)
    )
    conn.commit()
    conn.close()

def upsert_user(u: types.User, subscribe_flag: int | None = None, consent_shown: int | None = None):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + last_seen_ts."""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users WHERE user_id=?", (u.id,))
    row = cur.fetchone()
    now = int(time.time())

    if row:
        sets = ["last_seen_ts=?"]
        args = [now]
        if subscribe_flag is not None:
            sets.append("subscribe_flag=?")
            args.append(int(subscribe_flag))
        if consent_shown is not None:
            sets.append("consent_shown=?")
            args.append(int(consent_shown))
        sets_str = ", ".join(sets)
        args.append(u.id)
        cur.execute(f"UPDATE users SET {sets_str} WHERE user_id=?", args)
    else:
        cur.execute("""
            INSERT INTO users (user_id, username, first_name, last_name,
                               first_seen_ts, last_seen_ts, subscribe_flag, consent_shown)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            u.id, u.username, u.first_name, u.last_name,
            now, now,
            int(subscribe_flag or 0), int(consent_shown or 0)
        ))
    conn.commit()
    conn.close()

def get_user_flags(user_id: int) -> tuple[int, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (subscribe_flag, consent_shown). –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç ‚Äî (0,0)."""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT subscribe_flag, consent_shown FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return (0, 0)
    return int(row[0] or 0), int(row[1] or 0)

# ---------- ¬´–ó–∞–º–æ–∫¬ª –Ω–∞ 7 –¥–Ω–µ–π ----------
LOCK_DAYS = 7

def _load_usage() -> dict:
    if not USAGE_FILE.exists():
        return {}
    try:
        return json.loads(USAGE_FILE.read_text("utf-8"))
    except Exception:
        return {}

def _save_usage(data: dict):
    USAGE_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), "utf-8")

def can_draw_card(user_id: int) -> tuple[bool, str | None]:
    data = _load_usage()
    rec = data.get(str(user_id))
    if not rec:
        return True, None
    last_ts = datetime.fromisoformat(rec["last_draw"])
    if datetime.now() - last_ts >= timedelta(days=LOCK_DAYS):
        return True, None
    next_time = last_ts + timedelta(days=LOCK_DAYS)
    return False, next_time.strftime("%d.%m %H:%M")

def mark_card_drawn(user_id: int):
    data = _load_usage()
    data[str(user_id)] = {"last_draw": datetime.now().isoformat(timespec="seconds")}
    _save_usage(data)

# ---------- –ö–û–ù–¢–ï–ù–¢ –ö–ê–†–¢ (—Ç–≤–æ–∏ —Ç–µ–∫—Å—Ç—ã) ----------
DECKS: dict[str, dict[str, str]] = {
    "think": {
        "1": (
            "<b>–û—Ç–≤–µ—Ç:</b> –∏–Ω—Ç–µ—Ä–µ—Å –µ—Å—Ç—å, –Ω–æ —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–æ—Ä–æ–∂–Ω–∏—á–∞–µ—Ç. üòä\n"
            "<b>–®–∞–≥:</b> —Å–¥–µ–ª–∞–π –ª—ë–≥–∫–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è: –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ö–∞–∫ —Ç—ã?¬ª ‚Äî –±–µ–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ¬´–∫—Ç–æ –º—ã¬ª.\n"
            "¬´–ö–æ–≥–¥–∞ —Ä—è–¥–æ–º —Å–ø–æ–∫–æ–π–Ω–æ ‚Äî —á—É–≤—Å—Ç–≤–∞ —Å–∞–º–∏ –≤—ã–±–∏—Ä–∞—é—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è.¬ª"
        ),
        "2": (
            "<b>–û—Ç–≤–µ—Ç:</b> –≤–∏–¥–∏—Ç –≤ —Ç–µ–±–µ –æ–ø–æ—Ä—É, –Ω–æ –±–æ–∏—Ç—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è. üíõ\n"
            "<b>–®–∞–≥:</b> —Å–∫–∞–∂–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏: ¬´–ú–Ω–µ —Ç–µ–ø–ª–æ, –∫–æ–≥–¥–∞ –º—ã –æ–±—â–∞–µ–º—Å—è —á–∞—â–µ¬ª –∏ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤–¥–≤–æ—ë–º.\n"
            "¬´–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä–∏ –º—è–≥—á–µ –ª—é–±—ã—Ö —Å–ª–æ–≤.¬ª"
        ),
        "3": (
            "<b>–û—Ç–≤–µ—Ç:</b> —Å–∏–º–ø–∞—Ç–∏—è –µ—Å—Ç—å, –Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è. ü§î\n"
            "<b>–®–∞–≥:</b> –∑–∞–ø–∏—à–∏ 3 —Ñ–∞–∫—Ç–∞ —Å–≤–æ–µ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–µ–ª–∞, –∞ –Ω–µ —è—Ä–ª—ã–∫–∏) –∏ –ø—Ä–æ—è–≤–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—â–µ–Ω–∏–∏.\n"
            "¬´–Ø—Å–Ω–æ—Å—Ç—å –æ —Å–µ–±–µ –¥–µ–ª–∞–µ—Ç —á—É–∂–∏–µ —Å–æ–º–Ω–µ–Ω–∏—è —Ç–∏—à–µ.¬ª"
        ),
        "4": (
            "<b>–û—Ç–≤–µ—Ç:</b> –≤–æ—Å—Ö–∏—â–∞–µ—Ç—Å—è —Ç–≤–æ–µ–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –±–æ–∏—Ç—Å—è ¬´–Ω–µ –¥–æ—Ç—è–Ω—É—Ç—å¬ª. ‚ú®\n"
            "<b>–®–∞–≥:</b> –ø–æ–ø—Ä–æ—Å–∏ –æ –º–∞–ª–µ–Ω—å–∫–æ–π –ø–æ–º–æ—â–∏ –ø–æ –¥–µ–ª—É: ¬´–ü–æ–¥—Å–∫–∞–∂–µ—à—å, –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å‚Ä¶?¬ª ‚Äî —ç—Ç–æ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.\n"
            "¬´–°–∏–ª–∞ –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤ –Ω–µ–π –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ.¬ª"
        ),
        "5": (
            "<b>–û—Ç–≤–µ—Ç:</b> —á—É–≤—Å—Ç–≤–∞ –µ—Å—Ç—å, –Ω–æ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω(-–∞) –¥–µ–ª–∞–º–∏. üåßÔ∏è\n"
            "<b>–®–∞–≥:</b> –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç ¬´–ª—ë–≥–∫–∏–π –∫–æ–Ω—Ç–∞–∫—Ç 48 —á–∞—Å–æ–≤¬ª: –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—ë–ø–ª—ã–µ –∫–∞—Å–∞–Ω–∏—è –±–µ–∑ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö —Ç–µ–º.\n"
            "¬´–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–π —à–∞–≥ ‚Äî –º—è–≥–∫–∏–π —à–∞–≥.¬ª"
        ),
    },
    "money": {
        "1": (
            "<b>–û—Ç–≤–µ—Ç:</b> –≥–ª–∞–≤–Ω—ã–π —Å—Ç–æ–ø ‚Äî —Ä–∞—Å—Ñ–æ–∫—É—Å. üìå\n"
            "<b>–®–∞–≥:</b> –æ–¥–∏–Ω –¥–µ–Ω–µ–∂–Ω—ã–π —à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –∑–∞–∫—Ä—ã—Ç—å –æ–¥–∏–Ω —Å—á—ë—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 3 –æ—Ç–∫–ª–∏–∫–∞, —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –ø–æ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ ‚Äî –¥–æ–≤–µ–¥–∏ –¥–æ –∫–æ–Ω—Ü–∞.\n"
            "¬´–§–æ–∫—É—Å ‚Äî —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å –¥–æ—Ö–æ–¥–∞.¬ª"
        ),
        "2": (
            "<b>–û—Ç–≤–µ—Ç:</b> –∑–∞–Ω–∏–∂–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å. üíº\n"
            "<b>–®–∞–≥:</b> –ø—Ä–∏–±–∞–≤—å +10‚Äì15% –∫ —Ü–µ–Ω–µ/—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –Ω–∞–¥–±–∞–≤–∫—É: ¬´–ì–æ—Ç–æ–≤(–∞) –±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–∞—á, –ø—Ä–æ—à—É –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–ª–∞—Ç—É –¥–æ ___¬ª.\n"
            "¬´–î–µ–Ω—å–≥–∏ –∏–¥—É—Ç —Ç—É–¥–∞, –≥–¥–µ —Å–µ–±—è —Ü–µ–Ω—è—Ç.¬ª"
        ),
        "3": (
            "<b>–û—Ç–≤–µ—Ç:</b> –Ω–µ –≤–∏–¥–Ω–æ —Ç–≤–æ—é –ø–æ–ª—å–∑—É (–¥–µ–ª–æ –Ω–µ –≤ –Ω–∞–≤—ã–∫–∞—Ö). üîé\n"
            "<b>–®–∞–≥:</b> –ø–æ–ø—Ä–æ—Å–∏ —É 2 –ª—é–¥–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å: ¬´–ß—Ç–æ —Å–æ –º–Ω–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ —É–¥–æ–±–Ω–æ? –ß—Ç–æ —è –¥–µ–ª–∞—é –ª—É—á—à–µ –≤—Å–µ–≥–æ?¬ª ‚Äî –¥–æ–±–∞–≤—å —ç—Ç–æ –≤ —Ä–µ–∑—é–º–µ/–¥–∏–∞–ª–æ–≥–∏.\n"
            "¬´–°—Ç–∞–Ω—å –≤–∏–¥–∏–º(–æ–π) —Ç–∞–º, –≥–¥–µ —Ç—ã —É–∂–µ –ø–æ–ª–µ–∑–µ–Ω(–Ω–∞).¬ª"
        ),
        "4": (
            "<b>–û—Ç–≤–µ—Ç:</b> –¥–µ–Ω—å–≥–∏ —É–ø–∏—Ä–∞—é—Ç—Å—è –≤ —Ö–∞–æ—Å. üìí\n"
            "<b>–®–∞–≥:</b> ¬´—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ 20 –º–∏–Ω—É—Ç¬ª —Å–µ–≥–æ–¥–Ω—è: –≤—ã–ø–∏—Å–∫–∞ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Üí –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥/—Ö–≤–æ—Å—Ç ‚Üí 1 –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é.\n"
            "¬´–ü–æ—Ä—è–¥–æ–∫ ‚Äî —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Å–≤–æ–µ–º—É –ø–æ—Ç–æ–∫—É.¬ª"
        ),
        "5": (
            "<b>–û—Ç–≤–µ—Ç:</b> —Ä–∞—Å—Ç—ë—à—å –≤ –æ–¥–∏–Ω–æ—á–∫—É ‚Äî –ø–æ—Ç–æ–ª–æ–∫ –±–ª–∏–∑–∫–æ. ü§ù\n"
            "<b>–®–∞–≥:</b> –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–Ω–∞–∫–æ–º–æ–º—É(–æ–π) –ø—Ä–æ—Å—Ç–æ–µ –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω–æ–µ –¥–µ–ª–æ: ¬´–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –≤–æ–∑—å–º—ë–º –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–æ–µ–∫—Ç/—Å–º–µ–Ω—É¬ª –∏–ª–∏ –æ–±–º–µ–Ω –Ω–∞–≤—ã–∫–∞–º–∏.\n"
            "¬´–î–æ—Ö–æ–¥ –ª—é–±–∏—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞.¬ª"
        ),
    },
    "talent": {
        "1": (
            "<b>–û—Ç–≤–µ—Ç:</b> –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ. üí°\n"
            "<b>–®–∞–≥:</b> –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É —Ç–µ–º—É –∏ –æ–±—ä—è—Å–Ω–∏ –µ—ë –±–ª–∏–∑–∫–æ–º—É –∑–∞ 3‚Äì5 –º–∏–Ω—É—Ç –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏; –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–æ–Ω—è–ª(–∞).\n"
            "¬´–ë—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º ‚Äî —Ä–µ–¥–∫–∏–π –¥–∞—Ä.¬ª"
        ),
        "2": (
            "<b>–û—Ç–≤–µ—Ç:</b> —Å–æ–µ–¥–∏–Ω—è–µ—à—å –ª—é–¥–µ–π –∏ –∏–¥–µ–∏. üåâ\n"
            "<b>–®–∞–≥:</b> –ø–æ–∑–Ω–∞–∫–æ–º—å –¥–≤—É—Ö –∑–Ω–∞–∫–æ–º—ã—Ö, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª–µ–∑–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è, –∏ –∫—Ä–∞—Ç–∫–æ –Ω–∞–ø–∏—à–∏ ‚Äî —á–µ–º –æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –¥—Ä—É–≥ –¥—Ä—É–≥—É.\n"
            "¬´–¢–∞–º, –≥–¥–µ —Ç—ã ‚Äî –ø–æ—è–≤–ª—è—é—Ç—Å—è –º–æ—Å—Ç—ã.¬ª"
        ),
        "3": (
            "<b>–û—Ç–≤–µ—Ç:</b> —Ç–æ–Ω–∫–æ–µ —á—É–≤—Å—Ç–≤–æ –≤–∫—É—Å–∞/–Ω—é–∞–Ω—Å–∞. üé®\n"
            "<b>–®–∞–≥:</b> —Å–¥–µ–ª–∞–π ¬´–≤—ã–±–æ—Ä –¥–Ω—è¬ª: –æ–¥–Ω–∞ –≤–µ—â—å/–º—ã—Å–ª—å/–º—É–∑—ã–∫–∞ ‚Äî –∏ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ç–µ–±—è.\n"
            "¬´–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî —Å–∏–ª–∞, –∫–æ–≥–¥–∞ —É –Ω–µ—ë –µ—Å—Ç—å —Ñ–æ—Ä–º–∞.¬ª"
        ),
        "4": (
            "<b>–û—Ç–≤–µ—Ç:</b> –≤–∏–¥–∏—à—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —à–∞–≥–∏. üß≠\n"
            "<b>–®–∞–≥:</b> —Ä–∞—Å–ø–∏—à–∏ –æ–¥–Ω—É —Ü–µ–ª—å –≤ 3 —à–∞–≥–∞ –Ω–∞ 7 –¥–Ω–µ–π (—à–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑–º–µ—Ä–∏–º—ã) –∏ —Å–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —Å–µ–≥–æ–¥–Ω—è.\n"
            "¬´–ü—É—Ç—å –∫–æ—Ä–æ—á–µ, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–Ω –ø–ª–∞–Ω.¬ª"
        ),
        "5": (
            "<b>–û—Ç–≤–µ—Ç:</b> —Å–æ–±–∏—Ä–∞–µ—à—å —Å–º—ã—Å–ª –∏–∑ —Ö–∞–æ—Å–∞. üî¶\n"
            "<b>–®–∞–≥:</b> –≤—ã–±–µ—Ä–∏ –∑–∞–ø—É—Ç–∞–Ω–Ω—É—é —Ç–µ–º—É –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ—ë —Å—É—Ç—å –≤ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö ‚Äî –¥–ª—è —Å–µ–±—è.\n"
            "¬´–°–º—ã—Å–ª ‚Äî —Å–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–º–µ–µ—à—å –≤–∫–ª—é—á–∞—Ç—å.¬ª"
        ),
    },
}

def build_card_text(topic: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –û–î–ù–£ –∫–∞—Ä—Ç—É.
    6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ = 5 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–≤–æ–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ + 1 ¬´—Å–ª—É—á–∞–π–Ω–∞—è –∏–∑ —ç—Ç–∏—Ö –∂–µ 5¬ª.
    –ù–∏–∫–∞–∫–∏—Ö —á—É–∂–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–≤–æ–∏.
    """
    t = topic if topic in DECKS else "think"
    base_texts = list(DECKS[t].values())  # —Ä–æ–≤–Ω–æ 5

    idx = random.randrange(6)
    if idx == 5:
        chosen = random.choice(base_texts)   # ¬´—à–µ—Å—Ç–∞—è¬ª ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –∏–∑ —ç—Ç–∏—Ö –∂–µ 5
    else:
        chosen = base_texts[idx]             # –æ–¥–Ω–∞ –∏–∑ –ø—è—Ç–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

    return chosen + CTA_TAIL

# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
@dp.message_handler(commands=['start'])
async def cmd_start(m: types.Message):
    db_init()
    upsert_user(m.from_user, subscribe_flag=0)
    log_event(m.from_user.id, "start")

    # –ø—Ä–∏–≤–µ—Ç + —Ñ–æ—Ç–æ
    photo_path = BASE_DIR / "welcome.jpg"
    try:
        with open(photo_path, "rb") as photo:
            await m.answer_photo(photo, caption=WELCOME, reply_markup=KB_MAIN)
    except FileNotFoundError:
        await m.answer(WELCOME, reply_markup=KB_MAIN)

    # –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ö –†–ê–°–°–´–õ–ö–ï ‚Äî –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
    sub_flag, consent_shown = get_user_flags(m.from_user.id)
    if consent_shown == 0:
        upsert_user(m.from_user, consent_shown=1)
        await m.answer(CONSENT_TEXT, reply_markup=CONSENT_KB)

@dp.message_handler(Text(equals="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚ù§Ô∏è"))
async def agree_subscribe(m: types.Message):
    upsert_user(m.from_user, subscribe_flag=1)
    log_event(m.from_user.id, "subscribe", "consent_button")
    await m.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –Ø –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ —Ä–µ–¥–∫–æ ‚ú®", reply_markup=KB_MAIN)

@dp.message_handler(Text(equals="üö´ –ù–µ —Å–µ–π—á–∞—Å"))
async def decline_subscribe(m: types.Message):
    log_event(m.from_user.id, "consent_decline")
    await m.answer("–•–æ—Ä–æ—à–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –∫–æ–º–∞–Ω–¥–∞ /subscribe.", reply_markup=KB_MAIN)

@dp.message_handler(commands=['subscribe'])
async def manual_subscribe(m: types.Message):
    upsert_user(m.from_user, subscribe_flag=1)
    log_event(m.from_user.id, "subscribe", "manual")
    await m.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! üåø")

@dp.message_handler(commands=['unsubscribe'])
async def manual_unsubscribe(m: types.Message):
    upsert_user(m.from_user, subscribe_flag=0)
    log_event(m.from_user.id, "unsubscribe", "manual")
    await m.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å: /subscribe")

@dp.message_handler(Text(equals="–û –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"))
async def about_handler(m: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{OWNER_USERNAME[1:]}")) if OWNER_USERNAME.startswith("@") \
        else InlineKeyboardMarkup()
    await m.answer(ABOUT_TEXT, reply_markup=kb if kb.inline_keyboard else None)

@dp.message_handler(Text(equals="–ö–∞–Ω–∞–ª"))
async def channel_handler(m: types.Message):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=CHANNEL_LINK))
    await m.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª. –ñ–¥—É —Ç–µ–±—è üíö\n\n<b>18+</b>", reply_markup=kb)

@dp.message_handler(Text(equals="–ú–æ—è —Ç–µ–º–∞", ignore_case=True))
async def choose_topic(m: types.Message):
    # –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—Ä–∞–∑—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º
    await m.answer("–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=TOPICS_KB)

# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã (1‚Äì5 –∏–ª–∏ üé≤)
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("t:"))
async def topic_router(c: types.CallbackQuery):
    code = c.data.split(":", 1)[1]  # think | money | talent | menu
    if code == "menu":
        await c.message.edit_text("–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É:", reply_markup=TOPICS_KB)
        await c.answer()
        return

    # —Å—Ä–∞–∑—É –¥–∞—ë–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
    await c.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É:", reply_markup=build_cards_kb(code))
    await c.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ 1‚Äì5 –∏–ª–∏ üé≤
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("c:"))
async def card_choice(c: types.CallbackQuery):
    try:
        _, topic, key = c.data.split(":")  # topic in (think|money|talent), key in (1..5|rand)
    except ValueError:
        await c.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.", show_alert=True)
        return

    # –∑–∞–º–æ–∫ 7 –¥–Ω–µ–π
    ok, when = can_draw_card(c.from_user.id)
    if not ok:
        await c.answer()
        await c.message.answer(LOCK_TEXT, reply_markup=BACK_TO_MENU_KB)
        return

    # –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é 1..5 –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –∫–ª—é—á–µ–π
    if key == "rand":
        key = random.choice(list(DECKS.get(topic, {}).keys()))

    text = DECKS.get(topic, {}).get(key)
    if not text:
        await c.answer("–ö–∞—Ä—Ç—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å üôà", show_alert=True)
        return

    # –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã
    mark_card_drawn(c.from_user.id)
    upsert_user(c.from_user)  # –æ–±–Ω–æ–≤–∏—Ç—å last_seen
    log_event(c.from_user.id, "card", f"{topic}:{key}")

    await c.answer()
    await c.message.answer(text + CTA_TAIL, reply_markup=BACK_TO_MENU_KB)

# ---------- /stats (–∫—Ä–∞—Ç–∫–∞—è –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) ----------
@dp.message_handler(commands=['stats'])
async def cmd_stats(m: types.Message):
    if OWNER_USERNAME and f"@{(m.from_user.username or '').lower()}" != OWNER_USERNAME.lower():
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users")
    total = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM users WHERE subscribe_flag=1")
    subs = cur.fetchone()[0]
    week_ago = int((datetime.now() - timedelta(days=7)).timestamp())
    cur.execute("SELECT COUNT(DISTINCT user_id) FROM events WHERE ts>=?", (week_ago,))
    active7 = cur.fetchone()[0]
    conn.close()
    text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞: {subs}\n"
        f"–ê–∫—Ç–∏–≤ –∑–∞ 7 –¥–Ω–µ–π: {active7}"
    )
    await m.answer(text)

# ---------- –¢–û–ß–ö–ê –í–•–û–î–ê ----------
if __name__ == "__main__":
    db_init()
    executor.start_polling(dp, skip_updates=True)


