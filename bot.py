# -*- coding: utf-8 -*-
import os
import json
import time
import csv
import io
import random
import sqlite3
from datetime import datetime, timedelta

from pathlib import Path
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

# =========================
# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è/–Ω–∞—Å—Ç—Ä–æ–µ–∫
# =========================
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(BASE_DIR / ".env")

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
OWNER_USERNAME = os.getenv("OWNER_USERNAME", "").lstrip("@")
TELEGRAM_CHANNEL_LINK = os.getenv("TELEGRAM_CHANNEL_LINK", "").strip() or "https://t.me/annap_club"

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞. –û—Ç–∫—Ä–æ–π—Ç–µ .env –∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ BOT_TOKEN=...")

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# =========================
# –•—Ä–∞–Ω–∏–ª–∏—â–µ/–ë–î
# =========================
DB_PATH = str(BASE_DIR / "subscribers.db")

def _db():
    return sqlite3.connect(DB_PATH)

def init_db():
    conn = _db()
    cur = conn.cursor()
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
      user_id INTEGER PRIMARY KEY,
      username TEXT,
      first_name TEXT,
      last_name TEXT,
      first_seen_ts INTEGER,
      last_seen_ts INTEGER,
      is_subscribed INTEGER DEFAULT 0
    )
    """)
    # –ü–æ–¥–ø–∏—Å–∫–∏ (—è–≤–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ/–æ—Ç–∫–∞–∑)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS subscriptions (
      user_id INTEGER PRIMARY KEY,
      status TEXT,               -- 'active' | 'inactive'
      subscribed_ts INTEGER,
      unsubscribed_ts INTEGER
    )
    """)
    # –°–æ–±—ã—Ç–∏—è
    cur.execute("""
    CREATE TABLE IF NOT EXISTS events (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER,
      event_type TEXT,
      ts INTEGER,
      meta TEXT
    )
    """)
    conn.commit()
    conn.close()

init_db()

# =========================
# –£—Ç–∏–ª–∏—Ç—ã: —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
# =========================
def now_ts():
    return int(time.time())

def ensure_user(u: types.User):
    conn = _db()
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users WHERE user_id=?", (u.id,))
    row = cur.fetchone()
    if not row:
        cur.execute("""INSERT INTO users(user_id, username, first_name, last_name, first_seen_ts, last_seen_ts)
                       VALUES (?, ?, ?, ?, ?, ?)""",
                    (u.id, u.username or "", u.first_name or "", u.last_name or "", now_ts(), now_ts()))
    else:
        cur.execute("UPDATE users SET username=?, first_name=?, last_name=?, last_seen_ts=? WHERE user_id=?",
                    (u.username or "", u.first_name or "", u.last_name or "", now_ts(), u.id))
    conn.commit()
    conn.close()

def log_event(user_id: int, event_type: str, meta: str = None):
    conn = _db()
    cur = conn.cursor()
    cur.execute("INSERT INTO events(user_id, event_type, ts, meta) VALUES (?, ?, ?, ?)",
                (user_id, event_type, now_ts(), meta))
    conn.commit()
    conn.close()

def is_subscribed(user_id: int) -> bool:
    conn = _db()
    cur = conn.cursor()
    cur.execute("SELECT status FROM subscriptions WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    conn.close()
    return bool(row and (row[0] == "active"))

def mark_subscribed(user_id: int):
    conn = _db()
    cur = conn.cursor()
    cur.execute("INSERT OR REPLACE INTO subscriptions(user_id, status, subscribed_ts, unsubscribed_ts) VALUES (?, 'active', ?, COALESCE((SELECT unsubscribed_ts FROM subscriptions WHERE user_id=?), NULL))",
                (user_id, now_ts(), user_id))
    cur.execute("UPDATE users SET is_subscribed=1 WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def mark_unsubscribed(user_id: int):
    conn = _db()
    cur = conn.cursor()
    cur.execute("INSERT OR REPLACE INTO subscriptions(user_id, status, subscribed_ts, unsubscribed_ts) VALUES (?, 'inactive', COALESCE((SELECT subscribed_ts FROM subscriptions WHERE user_id=?), NULL), ?)",
                (user_id, user_id, now_ts()))
    cur.execute("UPDATE users SET is_subscribed=0 WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def consent_already_shown(user_id: int) -> bool:
    conn = _db()
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM events WHERE user_id=? AND event_type='consent_shown' LIMIT 1", (user_id,))
    row = cur.fetchone()
    conn.close()
    return row is not None

def last_draw_ts(user_id: int) -> int:
    conn = _db()
    cur = conn.cursor()
    cur.execute("SELECT ts FROM events WHERE user_id=? AND event_type='draw_card' ORDER BY ts DESC LIMIT 1", (user_id,))
    row = cur.fetchone()
    conn.close()
    return row[0] if row else 0

# =========================
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã/—Ç–µ–∫—Å—Ç—ã
# =========================
WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ¬´–ö–∞—Ä—Ç–∞ –Ø—Å–Ω–æ—Å—Ç–∏¬ª üåì\n"
    "–ü–æ–º–æ–≥–∞—é –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—è—Å–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ: —á—É–≤—Å—Ç–≤–∞, –¥–µ–Ω—å–≥–∏, –ø—É—Ç—å –∏ —Å–≤–æ–π —Ç–∞–ª–∞–Ω—Ç.\n\n"
    "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É ‚Äî –∏ —è –¥–∞–º —Ç–µ–±–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç + –º—è–≥–∫–∏–π —à–∞–≥-–¥–µ–π—Å—Ç–≤–∏–µ.\n"
    "üîû 18+. –û–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π."
)

KB_MAIN = ReplyKeyboardMarkup(resize_keyboard=True)
KB_MAIN.add(KeyboardButton("–ú–æ—è —Ç–µ–º–∞"))
KB_MAIN.add(KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª"))
KB_MAIN.add(KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∏—Å—å–º–∞"), KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))

KB_TOPICS = ReplyKeyboardMarkup(resize_keyboard=True)
KB_TOPICS.add(KeyboardButton("–ß—Ç–æ –æ–Ω(–∞) –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?"))
KB_TOPICS.add(KeyboardButton("–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ?"))
KB_TOPICS.add(KeyboardButton("–ú–æ–π —Å–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç"))
KB_TOPICS.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

CONSENT_KB = InlineKeyboardMarkup()
CONSENT_KB.add(InlineKeyboardButton("–î–∞, –ø—Ä–∏—Å—ã–ª–∞–π –¥–æ 2 –≤ –º–µ—Å—è—Ü", callback_data="consent_yes"))
CONSENT_KB.add(InlineKeyboardButton("–ù–µ —Å–µ–π—á–∞—Å", callback_data="consent_no"))

# =========================
# –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º (–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç + –º—è–≥–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ + —Ñ—Ä–∞–∑–∞)
# =========================
RESPONSES = {
    "–ß—Ç–æ –æ–Ω(–∞) –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?": [
        ("–¢—è–Ω–µ—Ç—Å—è, –Ω–æ –±–æ–∏—Ç—Å—è –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Ç–µ–±—è –æ–∂–∏–¥–∞–Ω–∏—è–º–∏.",
         "–î–∞–π –ø—Ä–æ—Å—Ç—É—é –æ–ø–æ—Ä—É: –æ–¥–Ω–∞ —Å–ø–æ–∫–æ–π–Ω–∞—è —Ñ—Ä–∞–∑–∞ ¬´—è —Ä—è–¥–æ–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞)¬ª.",
         "–¢—ã —Ü–µ–Ω–µ–Ω(–∞) –±–µ–∑ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤."),
        ("–°–µ–π—á–∞—Å —á–µ–ª–æ–≤–µ–∫ –±–æ–ª—å—à–µ –≤ —Å–≤–æ–∏—Ö –¥–µ–ª–∞—Ö, —á–µ–º –≤ —á—É–≤—Å—Ç–≤–∞—Ö.",
         "–°–ø—Ä–æ—Å–∏ –ø—Ä—è–º–æ, –∫–∞–∫ —Ç–µ–±–µ –±—ã—Ç—å –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é ‚Äî –±–µ–∑ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π.",
         "–¢–≤–æ—è —è—Å–Ω–æ—Å—Ç—å ‚Äî —Ç–≤–æ—è —Å–∏–ª–∞."),
        ("–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∏ —Å–∏–º–ø–∞—Ç–∏—è, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã.",
         "–°–¥–µ–ª–∞–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Å–∞–º(–∞): –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è.",
         "–ú—è–≥–∫–æ—Å—Ç—å ‚Äî –Ω–µ —Ä–∞–≤–Ω–∞ —Å–ª–∞–±–æ—Å—Ç–∏.")
    ],
    "–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ?": [
        ("–¢–≤–æ–π –ø–æ—Ç–æ–ª–æ–∫ ‚Äî —ç—Ç–æ –Ω–µ —Å—É–º–º–∞, –∞ —Ç–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.",
         "–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: –ø–æ–¥–Ω—è—Ç—å —Ü–µ–Ω—É/—Å–æ–∫—Ä–∞—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ/–≤–≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ–π –ø–∞–∫–µ—Ç.",
         "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –Ω–∞ –¥–æ—Å—Ç–æ–π–Ω—É—é –æ–ø–ª–∞—Ç—É."),
        ("–ì–ª–∞–≤–Ω–∞—è —É—Ç–µ—á–∫–∞ ‚Äî —Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ –Ω–∞ –º–µ–ª–æ—á–∏.",
         "–°–æ–±–µ—Ä–∏ –æ–¥–Ω–æ ¬´–¥–µ–Ω—å–≥–æ–¥–µ–ª–∞—é—â–µ–µ¬ª –¥–µ–π—Å—Ç–≤–∏–µ –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π –≤—Ä–µ–º—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.",
         "–§–æ–∫—É—Å –∫–æ—Ä–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."),
        ("–¢—ã –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –Ω–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è —Ç–µ–±—è ¬´—Å–∞–º —Å–æ–±–æ–π¬ª.",
         "–°–¥–µ–ª–∞–π –±—ã—Å—Ç—Ä—É—é —É–ø–∞–∫–æ–≤–∫—É: 3 –ø—É–Ω–∫—Ç–∞ –ø–æ–ª—å–∑—ã ‚Äî –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –¥–≤—É–º –ª—é–¥—è–º.",
         "–õ—ë–≥–∫–æ—Å—Ç—å ‚Äî —Ç–æ–∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.")
    ],
    "–ú–æ–π —Å–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç": [
        ("–£–ª–∞–≤–ª–∏–≤–∞—Ç—å —Å—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ –¥—Ä—É–≥–∏—Ö.",
         "–¢—Ä–µ–Ω–∏—Ä—É–π: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π ¬´–æ–¥–Ω—É –º—ã—Å–ª—å –¥–Ω—è¬ª –≤ –∑–∞–º–µ—Ç–∫–µ.",
         "–Ø—Å–Ω–æ—Å—Ç—å ‚Äî —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞."),
        ("–°–æ–±–∏—Ä–∞—Ç—å –ª—é–¥–µ–π –≤–æ–∫—Ä—É–≥ –∏–¥–µ–∏.",
         "–û—Ä–≥–∞–Ω–∏–∑—É–π –º–∏–Ω–∏-–≤—Å—Ç—Ä–µ—á—É/—á–∞—Ç—ã –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É ‚Äî –±–µ–∑ –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–∞.",
         "–¢–µ–ø–ª–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–µ –ø—Ä–∞–≤–∏–ª."),
        ("–ü—Ä–µ–≤—Ä–∞—â–∞—Ç—å —Ö–∞–æ—Å –≤ —Å–∏—Å—Ç–µ–º—É.",
         "–í–æ–∑—å–º–∏ –ª—é–±–æ–π –±–µ—Å–ø–æ—Ä—è–¥–æ–∫ –∏ —Å–¥–µ–ª–∞–π –∏–∑ –Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É –∏–∑ 3 —à–∞–≥–æ–≤.",
         "–ü–æ—Ä—è–¥–æ–∫ = —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤–Ω—É—Ç—Ä–∏.")
    ]
}

MOTIV = [
    "–î–µ–ª–∞–π –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –Ω–µ –ø–æ-–∏–¥–µ–∞–ª—å–Ω–æ–º—É.",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Å–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ, —á–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∑–∞–≤—Ç—Ä–∞.",
    "–¢—ã —É–∂–µ –±–ª–∏–∂–µ, —á–µ–º –¥—É–º–∞–µ—à—å.",
    "–ú—è–≥–∫–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Å–∏–ª–∞ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.",
    "–Ø—Å–Ω–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –¥–≤–∏–∂–µ–Ω–∏–∏."
]

# =========================
# –•–µ–ª–ø–µ—Ä—ã: –ø–µ—Ä–∏–æ–¥ /stats
# =========================
def parse_period(arg: str | None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ts_from, ts_to) –≤ UTC.
    –î–æ–ø—É—Å—Ç–∏–º–æ: None -> 7d, 'today', '7d', '30d', 'YYYY-MM-DD..YYYY-MM-DD'
    """
    ts_to = int(time.time())
    if not arg or arg.strip() == "":
        return ts_to - 7*86400, ts_to  # 7 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    s = arg.strip().lower()
    if s == "today":
        dt = datetime.utcnow().date()
        start = int(datetime(dt.year, dt.month, dt.day).timestamp())
        return start, ts_to
    if s.endswith("d") and s[:-1].isdigit():
        days = int(s[:-1])
        return ts_to - days*86400, ts_to
    if ".." in s:
        a, b = s.split("..", 1)
        try:
            start = int(datetime.fromisoformat(a).timestamp())
            end = int(datetime.fromisoformat(b).timestamp()) + 86399
            return start, end
        except Exception:
            return ts_to - 7*86400, ts_to
    return ts_to - 7*86400, ts_to

def human(n: int) -> str:
    return f"{n:,}".replace(",", " ")

# =========================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =========================
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    ensure_user(m.from_user)
    log_event(m.from_user.id, "start")

    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    photo_path = BASE_DIR / "welcome.jpg"
    if photo_path.exists():
        with open(photo_path, "rb") as p:
            await m.answer_photo(p, caption=WELCOME, reply_markup=KB_MAIN)
    else:
        await m.answer(WELCOME, reply_markup=KB_MAIN)

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –æ—Ñ—Ñ–µ—Ä –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
    if (not is_subscribed(m.from_user.id)) and (not consent_already_shown(m.from_user.id)):
        await m.answer(
            "–ú–æ–∂–Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—ë–ø–ª—ã–µ –ø–∏—Å—å–º–∞ (–¥–æ 2 –≤ –º–µ—Å—è—Ü): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç, –º–∏–Ω–∏-–ø—Ä–∞–∫—Ç–∏–∫–∏, –∞–∫—Ü–∏–∏?\n"
            "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /unsubscribe.",
            reply_markup=CONSENT_KB
        )
        log_event(m.from_user.id, "consent_shown")
    else:
        await m.answer("–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ üåø", reply_markup=KB_MAIN)

@dp.callback_query_handler(Text(equals="consent_yes"))
async def cb_consent_yes(c: types.CallbackQuery):
    mark_subscribed(c.from_user.id)
    log_event(c.from_user.id, "subscribe")
    await c.message.edit_reply_markup()
    await c.message.answer("–°–ø–∞—Å–∏–±–æ! ‚úâÔ∏è –ü–∏—Å—å–º–∞ –±—É–¥—É—Ç –¥–æ 2 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü. /unsubscribe ‚Äî —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")

@dp.callback_query_handler(Text(equals="consent_no"))
async def cb_consent_no(c: types.CallbackQuery):
    log_event(c.from_user.id, "subscribe_decline")
    await c.message.edit_reply_markup()
    await c.message.answer("–û–∫–µ–π, –±–µ–∑ –ø–∏—Å–µ–º. –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /subscribe.")

@dp.message_handler(commands=["subscribe"])
async def cmd_subscribe(m: types.Message):
    mark_subscribed(m.from_user.id)
    log_event(m.from_user.id, "subscribe_manual")
    await m.answer("–ì–æ—Ç–æ–≤–æ! ‚úâÔ∏è –í–∫–ª—é—á–∏–ª–∞ –ø–∏—Å—å–º–∞ (–¥–æ 2 –≤ –º–µ—Å—è—Ü). /unsubscribe ‚Äî —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å.")

@dp.message_handler(commands=["unsubscribe"])
async def cmd_unsubscribe(m: types.Message):
    mark_unsubscribed(m.from_user.id)
    log_event(m.from_user.id, "unsubscribe")
    await m.answer("–ü–∏—Å—å–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî /subscribe.")

@dp.message_handler(Text(equals="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª"))
async def go_channel(m: types.Message):
    log_event(m.from_user.id, "click_channel")
    await m.answer(f"–ù–∞—à –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL_LINK}")

@dp.message_handler(Text(equals="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∏—Å—å–º–∞"))
async def btn_subscribe(m: types.Message):
    if is_subscribed(m.from_user.id):
        await m.answer("–¢—ã —É–∂–µ –Ω–∞ —Å–≤—è–∑–∏ ‚úâÔ∏è. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å, –º–æ–∂–Ω–æ /unsubscribe.")
    else:
        mark_subscribed(m.from_user.id)
        log_event(m.from_user.id, "subscribe_button")
        await m.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚úâÔ∏è. –î–æ 2 –ø–∏—Å–µ–º –≤ –º–µ—Å—è—Ü ‚Äî –±–µ—Ä–µ–∂–Ω–æ –∏ –ø–æ –¥–µ–ª—É.")

@dp.message_handler(Text(equals="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
async def btn_unsubscribe(m: types.Message):
    if not is_subscribed(m.from_user.id):
        await m.answer("–°–µ–π—á–∞—Å –ø–∏—Å—å–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ú–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å /subscribe.")
    else:
        mark_unsubscribed(m.from_user.id)
        log_event(m.from_user.id, "unsubscribe_button")
        await m.answer("–û—Ç–∫–ª—é—á–∏–ª–∞ –ø–∏—Å—å–º–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å üíõ")

@dp.message_handler(Text(equals="–ú–æ—è —Ç–µ–º–∞"))
async def choose_topic(m: types.Message):
    log_event(m.from_user.id, "open_topics")
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=KB_TOPICS)

@dp.message_handler(Text(equals="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
async def back_main(m: types.Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=KB_MAIN)

# --- 7-–¥–Ω–µ–≤–Ω—ã–π ¬´–∑–∞–º–æ–∫¬ª –Ω–∞ –≤—ã–¥–∞—á—É
LOCK_DAYS = 7

async def guard_lock(m: types.Message) -> bool:
    last = last_draw_ts(m.from_user.id)
    if last and (now_ts() - last) < LOCK_DAYS * 86400:
        left = LOCK_DAYS*86400 - (now_ts() - last)
        days = max(1, left // 86400)
        log_event(m.from_user.id, "locked")
        await m.answer(
            f"¬´–ö–∞—Ä—Ç–∞ –Ø—Å–Ω–æ—Å—Ç–∏¬ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ {LOCK_DAYS} –¥–Ω–µ–π.\n"
            f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ {days} –¥–Ω.\n\n"
            f"–ü–æ–∫–∞ —Ç–µ–±—è –∂–¥—É—Ç —Ä–∞–∑–±–æ—Ä—ã –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ: {TELEGRAM_CHANNEL_LINK} üéÅ"
        )
        return True
    return False

def make_answer(topic: str):
    trio = random.choice(RESPONSES[topic])
    short, action, phrase = trio
    motiv = random.choice(MOTIV)
    return (
        f"<b>{topic}</b>\n\n"
        f"–û—Ç–≤–µ—Ç: {short}\n"
        f"–®–∞–≥: {action}\n\n"
        f"{phrase} ‚Ä¢ {motiv}\n\n"
        f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL_LINK}\n"
        f"üéÅ -50% –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–±–æ—Ä ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–Ø–°–ù–û–°–¢–¨¬ª @AnnaPClub"
    )

@dp.message_handler(Text(equals=list(RESPONSES.keys())))
async def topic_handler(m: types.Message):
    topic = m.text.strip()
    log_event(m.from_user.id, "choose_theme", meta=topic)

    if await guard_lock(m):
        return

    # ¬´6 –∫–∞—Ä—Ç¬ª: –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º 1 –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º draw_card
    text = make_answer(topic)
    log_event(m.from_user.id, "draw_card", meta=topic)
    await m.answer(text, reply_markup=KB_MAIN)

# =========================
# /stats –∏ /export (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
# =========================
def only_owner(func):
    async def wrapper(m: types.Message, *args, **kwargs):
        if (m.from_user.username or "").lower() != (OWNER_USERNAME or "").lower():
            return await m.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return await func(m, *args, **kwargs)
    return wrapper

@dp.message_handler(commands=["stats"])
@only_owner
async def cmd_stats(m: types.Message):
    arg = m.get_args()  # —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    ts_from, ts_to = parse_period(arg)

    conn = _db()
    cur = conn.cursor()

    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–ø–æ first_seen_ts)
    cur.execute("SELECT COUNT(*) FROM users WHERE first_seen_ts BETWEEN ? AND ?", (ts_from, ts_to))
    new_users = cur.fetchone()[0] or 0

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–ø–æ —Å–æ–±—ã—Ç–∏—è–º)
    cur.execute("SELECT COUNT(DISTINCT user_id) FROM events WHERE ts BETWEEN ? AND ?", (ts_from, ts_to))
    active_users = cur.fetchone()[0] or 0

    # –í—ã–±–æ—Ä —Ç–µ–º
    topics = ["–ß—Ç–æ –æ–Ω(–∞) –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?", "–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ?", "–ú–æ–π —Å–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç"]
    topic_counts = {}
    for t in topics:
        cur.execute("SELECT COUNT(*) FROM events WHERE event_type='choose_theme' AND meta=? AND ts BETWEEN ? AND ?",
                    (t, ts_from, ts_to))
        topic_counts[t] = cur.fetchone()[0] or 0

    # –í—ã–¥–∞—á–∏ –∏ –∑–∞–º–æ–∫
    cur.execute("SELECT COUNT(*) FROM events WHERE event_type='draw_card' AND ts BETWEEN ? AND ?", (ts_from, ts_to))
    draws = cur.fetchone()[0] or 0

    cur.execute("SELECT COUNT(*) FROM events WHERE event_type='locked' AND ts BETWEEN ? AND ?", (ts_from, ts_to))
    locked = cur.fetchone()[0] or 0

    # –ü–æ–¥–ø–∏—Å–∫–∏
    cur.execute("SELECT COUNT(*) FROM events WHERE event_type IN ('subscribe','subscribe_manual','subscribe_button') AND ts BETWEEN ? AND ?", (ts_from, ts_to))
    subs = cur.fetchone()[0] or 0
    cur.execute("SELECT COUNT(*) FROM events WHERE event_type IN ('unsubscribe','unsubscribe_button') AND ts BETWEEN ? AND ?", (ts_from, ts_to))
    unsubs = cur.fetchone()[0] or 0

    # –ö–ª–∏–∫–∏
    cur.execute("SELECT COUNT(*) FROM events WHERE event_type='click_channel' AND ts BETWEEN ? AND ?", (ts_from, ts_to))
    clicks_channel = cur.fetchone()[0] or 0

    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:
    def fmt_ts(ts): return datetime.utcfromtimestamp(ts).strftime("%Y-%m-%d")
    period_label = f"{fmt_ts(ts_from)}..{fmt_ts(ts_to)}"

    lines = [
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period_label})",
        f"üë§ –ù–æ–≤—ã–µ: {human(new_users)}",
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {human(active_users)}",
        "",
        "üí¨ –¢–µ–º—ã:"
    ]
    for t in topics:
        lines.append(f"‚Äî {t}: {human(topic_counts[t])}")
    lines += [
        "",
        f"üÉè –í—ã–¥–∞—á–∏ –∫–∞—Ä—Ç: {human(draws)}",
        f"üîí –ó–∞–º–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–ª: {human(locked)}",
        "",
        f"‚úâÔ∏è –ü–æ–¥–ø–∏—Å–∫–∏: +{human(subs)} / –æ—Ç–ø–∏—Å–∫–∏: {human(unsubs)}",
        f"üîó –ö–ª–∏–∫–∏ ¬´–∫–∞–Ω–∞–ª¬ª: {human(clicks_channel)}",
    ]

    await m.reply("\n".join(lines))

@dp.message_handler(commands=["export"])
@only_owner
async def cmd_export(m: types.Message):
    arg = m.get_args()
    ts_from, ts_to = parse_period(arg)

    conn = _db()
    cur = conn.cursor()
    cur.execute("""
        SELECT e.id, e.user_id, e.event_type, e.ts, IFNULL(e.meta,'')
        FROM events e
        WHERE e.ts BETWEEN ? AND ?
        ORDER BY e.id ASC
    """, (ts_from, ts_to))
    rows = cur.fetchall()
    conn.close()

    # –ì–æ—Ç–æ–≤–∏–º CSV –≤ –ø–∞–º—è—Ç–∏
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(["id","user_id","event_type","ts","datetime_utc","meta"])
    for r in rows:
        rid, uid, et, ts, meta = r
        dt = datetime.utcfromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")
        w.writerow([rid, uid, et, ts, dt, meta])
    data = buf.getvalue().encode("utf-8")

    await m.answer_document(
        types.InputFile(io.BytesIO(data), filename=f"events_{datetime.utcnow().strftime('%Y%m%d_%H%M')}.csv"),
        caption="–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π (UTC)."
    )

# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
