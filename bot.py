# -*- coding: utf-8 -*-
"""
Clarity Bot ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
- aiogram 2.25.1
- Python 3.11
–§—É–Ω–∫—Ü–∏–∏:
  ‚Ä¢ /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —Ñ–æ—Ç–æ
  ‚Ä¢ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó (consent_shown)
  ‚Ä¢ —Ä—É—á–Ω–æ–µ /subscribe –∏ /unsubscribe
  ‚Ä¢ –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é ¬´–ú–æ—è —Ç–µ–º–∞¬ª ‚Üí 3 —Ç–µ–º—ã ‚Üí 6 –∫–∞—Ä—Ç (5 —Ñ–∏–∫—Å + —Å–ª—É—á–∞–π–Ω–∞—è)
  ‚Ä¢ ¬´–∑–∞–º–æ–∫¬ª –Ω–∞ 7 –¥–Ω–µ–π –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
  ‚Ä¢ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ SQLite (users/events)
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env:
  BOT_TOKEN=...
  TELEGRAM_CHANNEL_LINK=https://t.me/annap_club
  OWNER_USERNAME=@AnnaPClub
"""

import os
import json
import random
import logging
import asyncio
import time
from pathlib import Path
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv
import sqlite3

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s:%(name)s:%(message)s"
)

# ---------- BASE & ENV ----------
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(dotenv_path=BASE_DIR / ".env")

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_LINK = os.getenv("TELEGRAM_CHANNEL_LINK", "https://t.me/your_channel")
OWNER_USERNAME = (os.getenv("OWNER_USERNAME", "@your_username") or "").strip()
USAGE_FILE = BASE_DIR / "usage.json"          # –∑–∞–º–æ–∫ –Ω–∞ 7 –¥–Ω–µ–π
DB_PATH = BASE_DIR / "subscribers.db"         # –±–∞–∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Å–æ–±—ã—Ç–∏–π

if not TOKEN:
    raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞. –û—Ç–∫—Ä–æ–π—Ç–µ .env –∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ BOT_TOKEN=...")

# ---------- –ë–û–¢ ----------
bot = Bot(token=TOKEN, parse_mode="HTML", timeout=120)
dp = Dispatcher(bot)

# ---------- –î–ò–°–ö–õ–ï–ô–ú–ï–†–´ –∏ —Ç–µ–∫—Å—Ç—ã ----------
WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ¬´–ö–∞—Ä—Ç–∞ —è—Å–Ω–æ—Å—Ç–∏¬ª üåó\n\n"
    "–ù–∞–∂–º–∏ ¬´–ú–æ—è —Ç–µ–º–∞¬ª ‚Üí –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç—Ä—ë—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—É—á–∏ –º—è–≥–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É.\n"
    "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ <b>—Ä–∞–∑ –≤ 7 –¥–Ω–µ–π</b>, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç—Ä–µ–∑–≤—ã–π –≤–∑–≥–ª—è–¥ –∏ –ø–æ–ª—å–∑—É.\n\n"
    "–í–∞–∂–Ω–æ: –±–æ—Ç –Ω–æ—Å–∏—Ç —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, "
    "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π. <b>18+</b>"
)

CONSENT_TEXT = (
    "–ú–æ–∂–Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—ë–ø–ª—ã–µ –ø–∏—Å—å–º–∞ (–¥–æ 2 –≤ –º–µ—Å—è—Ü): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç, –º–∏–Ω–∏-–ø—Ä–∞–∫—Ç–∏–∫–∏, –∞–∫—Ü–∏–∏?\n"
    "–¢—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /unsubscribe."
)

CONSENT_KB = ReplyKeyboardMarkup(resize_keyboard=True)
CONSENT_KB.add(KeyboardButton("‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("üö´ –ù–µ —Å–µ–π—á–∞—Å"))

KB_MAIN = ReplyKeyboardMarkup(resize_keyboard=True)
KB_MAIN.add(KeyboardButton("–ú–æ—è —Ç–µ–º–∞"))

TOPICS_KB = InlineKeyboardMarkup(row_width=1)
TOPICS_KB.add(
    InlineKeyboardButton("–ß—Ç–æ –æ–Ω(–∞) –¥—É–º–∞–µ—Ç –æ–±–æ –º–Ω–µ?", callback_data="t:think"),
    InlineKeyboardButton("–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ?", callback_data="t:money"),
    InlineKeyboardButton("–ú–æ–π —Å–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç", callback_data="t:talent"),
)

BACK_TO_MENU_KB = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="t:menu")
)

# ---------- SQLite: —Å—Ö–µ–º–∞ –∏ —É—Ç–∏–ª–∏—Ç—ã ----------

def db_init():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    # —Ç–∞–±–ª–∏—Ü–∞ users
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id       INTEGER PRIMARY KEY,
            username      TEXT,
            first_name    TEXT,
            last_name     TEXT,
            first_seen_ts INTEGER,
            last_seen_ts  INTEGER,
            subscribe_flag INTEGER DEFAULT 0,
            consent_shown  INTEGER DEFAULT 0
        )
    """)
    # —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
    cur.execute("""
        CREATE TABLE IF NOT EXISTS events (
            id        INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id   INTEGER,
            event_type TEXT,
            ts        INTEGER,
            meta      TEXT
        )
    """)
    conn.commit()
    conn.close()

def log_event(user_id: int, event_type: str, meta: str | None = None):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO events (user_id, event_type, ts, meta) VALUES (?,?,?,?)",
        (user_id, event_type, int(time.time()), meta)
    )
    conn.commit()
    conn.close()

def upsert_user(u: types.User, subscribe_flag: int | None = None, consent_shown: int | None = None):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + last_seen_ts."""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users WHERE user_id=?", (u.id,))
    row = cur.fetchone()
    now = int(time.time())
    if row:
        sets = ["last_seen_ts=?"]
        args = [now]
        if subscribe_flag is not None:
            sets.append("subscribe_flag=?")
            args.append(int(subscribe_flag))
        if consent_shown is not None:
            sets.append("consent_shown=?")
            args.append(int(consent_shown))
        sets_str = ", ".join(sets)
        args.extend([u.id])
        cur.execute(f"UPDATE users SET {sets_str} WHERE user_id=?", args)
    else:
        cur.execute("""
            INSERT INTO users (user_id, username, first_name, last_name, first_seen_ts,
                               last_seen_ts, subscribe_flag, consent_shown)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            u.id, u.username, u.first_name, u.last_name, now, now,
            int(subscribe_flag or 0), int(consent_shown or 0)
        ))
    conn.commit()
    conn.close()

def get_user_flags(user_id: int) -> tuple[int, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (subscribe_flag, consent_shown)."""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT subscribe_flag, consent_shown FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return (0, 0)
    return int(row[0] or 0), int(row[1] or 0)

# ---------- ¬´–ó–∞–º–æ–∫¬ª –Ω–∞ 7 –¥–Ω–µ–π ----------

LOCK_DAYS = 7

def _load_usage() -> dict:
    if not USAGE_FILE.exists():
        return {}
    try:
        return json.loads(USAGE_FILE.read_text("utf-8"))
    except Exception:
        return {}

def _save_usage(data: dict):
    USAGE_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), "utf-8")

def can_draw_card(user_id: int) -> tuple[bool, str | None]:
    data = _load_usage()
    rec = data.get(str(user_id))
    if not rec:
        return True, None
    last_ts = datetime.fromisoformat(rec["last_draw"])
    if datetime.now() - last_ts >= timedelta(days=LOCK_DAYS):
        return True, None
    next_time = last_ts + timedelta(days=LOCK_DAYS)
    return False, next_time.strftime("%d.%m %H:%M")

def mark_card_drawn(user_id: int):
    data = _load_usage()
    data[str(user_id)] = {"last_draw": datetime.now().isoformat(timespec="seconds")}
    _save_usage(data)

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç ----------

def build_card_text(topic: str) -> str:
    """6 –∫–∞—Ä—Ç = 5 —Ñ–∏–∫—Å + 1 —Å–ª—É—á–∞–π–Ω–∞—è"""
    # –ö–æ—Ä–æ—Ç–∫–∏–µ, –º—è–≥–∫–∏–µ, –ø–æ–ª–µ–∑–Ω—ã–µ ‚Äî –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏
    decks = {
        "think": [
            ("–°–µ–π—á–∞—Å –∫ —Ç–µ–±–µ –º–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.",
             "–°–æ—Ö—Ä–∞–Ω–∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ: –∑–∞–¥–∞–≤–∞–π –ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–ª—É—à–∞–π –æ—Ç–≤–µ—Ç—ã."),
            ("–ß–µ–ª–æ–≤–µ–∫ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è.",
             "–ü–æ–±–µ—Ä–µ–≥–∏ —Å–µ–±—è: –Ω–µ —Ñ–æ—Ä—Å–∏—Ä—É–π –∏ –¥–∞–π –ø–æ–≤–µ–¥–µ–Ω–∏—é –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è."),
            ("–ï—Å—Ç—å —Å–∏–º–ø–∞—Ç–∏—è, –Ω–æ –µ—Å—Ç—å –∏ —Å–æ–º–Ω–µ–Ω–∏—è.",
             "–°–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö: —á—Ç–æ —Ç–µ–±–µ –≤–∞–∂–Ω–æ –∏ —á—Ç–æ –Ω–µ –æ–∫."),
            ("–ö–æ–Ω—Ç–∞–∫—Ç –≤–∞–∂–µ–Ω, –Ω–æ –µ—Å—Ç—å —É—Å—Ç–∞–ª–æ—Å—Ç—å.",
             "–°–¥–µ–ª–∞–π –º–∞–ª–µ–Ω—å–∫—É—é –ø–∞—É–∑—É: –¥–µ–Ω—å —Ç–∏—à–∏–Ω—ã –ø–æ–π–¥—ë—Ç –Ω–∞ –ø–æ–ª—å–∑—É."),
            ("–ù—É–∂–Ω–∞ —è—Å–Ω–æ—Å—Ç—å.",
             "–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é –≤—Å—Ç—Ä–µ—á—É –∏ –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å."),
        ],
        "money": [
            ("–¢–≤–æ—è –æ–ø–æ—Ä–∞ ‚Äî —Ä–∏—Ç–º.",
             "–í—ã–¥–µ–ª–∏ 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –Ω–∞ –æ–¥–Ω–æ –¥–µ–Ω–µ–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."),
            ("–†–µ—Å—É—Ä—Å —É–∂–µ —Ä—è–¥–æ–º.",
             "–°–æ–±–µ—Ä–∏ 3-5 –ø—Ä–æ—à–ª—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤/–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –Ω–∞–ø–æ–º–Ω–∏ –æ —Å–µ–±–µ."),
            ("–†–æ—Å—Ç —á–µ—Ä–µ–∑ —Ñ–æ–∫—É—Å.",
             "–û–±—Ä–µ–∂—å 1 –ª–∏—à–Ω–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É—Å–∏–ª–∏ —Ç–æ, —á—Ç–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."),
            ("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.",
             "–°–æ—Å—Ç–∞–≤—å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∞–π—Å –∏–∑ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî –ª—é–¥—è–º —Ç–∞–∫ –ª–µ–≥—á–µ –≤—ã–±—Ä–∞—Ç—å."),
            ("–¢—ã –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
             "–ü–æ–¥–Ω–∏–º–∏ —Ü–µ–Ω—É –Ω–∞ 10% –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."),
        ],
        "talent": [
            ("–°–∏–ª–∞ –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
             "–ó–∞–ø–∏—à–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ —á–∞—Å—Ç–æ –ø—Ä–æ—Å—è—Ç —Ç–µ–±–µ –æ–±—ä—è—Å–Ω–∏—Ç—å."),
            ("–¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—ë–ø–ª–∞—è –∏ —Ç–æ—á–Ω–∞—è.",
             "–ü–æ–¥—É–º–∞–π –ø—Ä–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞ 20‚Äì30 –º–∏–Ω—É—Ç."),
            ("–¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å —Å–º—ã—Å–ª –∏–∑ –¥–µ—Ç–∞–ª–µ–π.",
             "–ü–æ–ø—Ä–æ–±—É–π –¥–µ–ª–∞—Ç—å –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä—ã –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É –∏–∑ 5 –ø—É–Ω–∫—Ç–æ–≤."),
            ("–¢–∞–ª–∞–Ω—Ç ‚Äî –≤ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–∏.",
             "–î–µ–ª–∞–π –¥–µ–ª–∞ –≤ —Ç–æ–º —Ç–µ–º–ø–µ, –≥–¥–µ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤–∫—É—Å: –æ–Ω –∏ –µ—Å—Ç—å —Ç–≤–æ–π –∑–Ω–∞–∫."),
            ("–¢–≤–æ—è —Ä–µ—á—å ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.",
             "–ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –¥—Ä—É–≥—É —Ç–∞–∫, –∫–∞–∫ –±—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞."),
        ],
    }
    pool = decks.get(topic, decks["think"]).copy()
    # —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞ (—à–µ—Å—Ç–∞—è)
    random_card = (
        "–ò–Ω—Ç—É–∏—Ü–∏—è —É–∂–µ –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç.",
        "–°–¥–µ–ª–∞–π —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —ç—Ç—É —Å—Ç–æ—Ä–æ–Ω—É —Å–µ–≥–æ–¥–Ω—è."
    )
    pool.append(random_card)
    choice = random.choice(pool)
    title, action = choice
    return (
        f"<b>–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:</b> {title}\n\n"
        f"<b>–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</b> {action}\n\n"
        "–ë–µ—Ä–µ–≥–∏ —Å–µ–±—è. –ü—É—Ç—å –ø—Ä–æ—è—Å–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –º—ã –¥–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏. ‚ú®\n\n"
        f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_LINK}\n"
        "üéÅ –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ ¬´—è—Å–Ω–æ—Å—Ç—å¬ª –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É 50% –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–±–æ—Ä."
    )

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------

@dp.message_handler(commands=['start'])
async def cmd_start(m: types.Message):
    db_init()
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏)
    upsert_user(m.from_user, subscribe_flag=0)
    # –ª–æ–≥
    log_event(m.from_user.id, "start")
    # –ø—Ä–∏–≤–µ—Ç + —Ñ–æ—Ç–æ
    photo_path = BASE_DIR / "welcome.jpg"
    try:
        with open(photo_path, "rb") as photo:
            await m.answer_photo(photo, caption=WELCOME, reply_markup=KB_MAIN)
    except FileNotFoundError:
        await m.answer(WELCOME, reply_markup=KB_MAIN)

    # –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
    sub_flag, consent_shown = get_user_flags(m.from_user.id)
    if consent_shown == 0:
        upsert_user(m.from_user, consent_shown=1)  # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–µ
        await m.answer(CONSENT_TEXT, reply_markup=CONSENT_KB)

@dp.message_handler(Text(equals="‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"))
async def agree_subscribe(m: types.Message):
    upsert_user(m.from_user, subscribe_flag=1)
    log_event(m.from_user.id, "subscribe", "consent_button")
    await m.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –Ø –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ —Ä–µ–¥–∫–æ ‚ú®", reply_markup=KB_MAIN)

@dp.message_handler(Text(equals="üö´ –ù–µ —Å–µ–π—á–∞—Å"))
async def decline_subscribe(m: types.Message):
    # –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑ (—Ñ–ª–∞–≥ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –º–µ–Ω—è–µ–º)
    log_event(m.from_user.id, "consent_decline")
    await m.answer("–•–æ—Ä–æ—à–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –∫–æ–º–∞–Ω–¥–∞ /subscribe.", reply_markup=KB_MAIN)

@dp.message_handler(commands=['subscribe'])
async def manual_subscribe(m: types.Message):
    upsert_user(m.from_user, subscribe_flag=1)
    log_event(m.from_user.id, "subscribe", "manual")
    await m.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! üåø")

@dp.message_handler(commands=['unsubscribe'])
async def manual_unsubscribe(m: types.Message):
    upsert_user(m.from_user, subscribe_flag=0)
    log_event(m.from_user.id, "unsubscribe", "manual")
    await m.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞. –¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –µ—ë —Å–Ω–æ–≤–∞: /subscribe")

@dp.message_handler(Text(equals="–ú–æ—è —Ç–µ–º–∞"))
async def choose_topic(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=types.ReplyKeyboardRemove())
    await m.answer("–¢–µ–º—ã:", reply_markup=TOPICS_KB)

@dp.callback_query_handler(Text(startswith="t:"))
async def topic_router(c: types.CallbackQuery):
    code = c.data.split(":", 1)[1]
    if code == "menu":
        await c.message.edit_text("–¢–µ–º—ã:", reply_markup=TOPICS_KB)
        await c.answer()
        return

    # –∑–∞–º–æ–∫ 7 –¥–Ω–µ–π
    ok, when = can_draw_card(c.from_user.id)
    if not ok:
        msg = (
            f"–ö–∞—Ä—Ç—É —è—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å 1 —Ä–∞–∑ –≤ {LOCK_DAYS} –¥–Ω–µ–π.\n"
            f"–ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞: <b>{when}</b>\n\n"
            f"–ü–æ–∫–∞ —Ç–µ–±—è –∂–¥—É—Ç —Ä–∞—Å–∫–ª–∞–¥—ã –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ: {CHANNEL_LINK}"
        )
        await c.answer()
        await c.message.answer(msg, reply_markup=BACK_TO_MENU_KB)
        return

    # –≤—ã–¥–∞—ë–º –∫–∞—Ä—Ç—É
    text = build_card_text(code)
    mark_card_drawn(c.from_user.id)
    upsert_user(c.from_user)  # –æ–±–Ω–æ–≤–ª—è–µ–º last_seen
    log_event(c.from_user.id, "card", code)

    await c.answer()
    await c.message.answer(text, reply_markup=BACK_TO_MENU_KB)

# ---------- /stats (–∫—Ä–∞—Ç–∫–∞—è –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) ----------
@dp.message_handler(commands=['stats'])
async def cmd_stats(m: types.Message):
    if OWNER_USERNAME and f"@{m.from_user.username or ''}".lower() != OWNER_USERNAME.lower():
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users")
    total = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM users WHERE subscribe_flag=1")
    subs = cur.fetchone()[0]
    # –∞–∫—Ç–∏–≤ –∑–∞ 7 –¥–Ω–µ–π
    week_ago = int((datetime.now() - timedelta(days=7)).timestamp())
    cur.execute("SELECT COUNT(DISTINCT user_id) FROM events WHERE ts>=?", (week_ago,))
    active7 = cur.fetchone()[0]
    conn.close()
    text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞: {subs}\n"
        f"–ê–∫—Ç–∏–≤ –∑–∞ 7 –¥–Ω–µ–π: {active7}"
    )
    await m.answer(text)

# ---------- –¢–û–ß–ö–ê –í–•–û–î–ê ----------
if __name__ == "__main__":
    db_init()
    executor.start_polling(dp, skip_updates=True)
